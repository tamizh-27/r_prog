v1 = c(1,2,3,4,5)
v1
head(v1)
v2 = 1:10
v2
tail(v2)
v3 = 3.5:10.3
v3
seq(3,10,by=0.4)
seq(0,1,length=10)
v1 = c(1,2,3,4,5)
v2 = c(3,5,2,4,1)
v1+v2
v1-v2
v1*v2
v1 = c(1,2,3,4,5,6)
v2 = c(3,5)
v2+v1   # c(1,2,3,4,5,6) + c(3,5,3,5,3,5)
v3 = c(1,2,3,4,5,6,7)
# WARNING - perform operation only if
# longer vector length is a multiple of shorter vector length
v3 + v2
v1 + v2   # c(1,2,3,4,5,6) + c(3,5,3,5,3,5)
# vector sorting
v4 = c(41,4,24,2,65,-46,31)
typeof(v3)
v3
v = 3.2:8.4
v
v = 3.2:8.4:1
v = 3.2:8.4:1.5
v
v = 3.2:8.4
v
typeof(v)
v4
sort(v4)
# vector sorting
v4 = c(41,4,24,2,65,-46,31)
sort(v4,decreasing = T)
color = c("Red","blue","violet","Green")
sort(color)
# vector indexing
v5 = c(27,4,20,36,43,11,29)
v5[3] # starting index from 1
v5[3:6]
v5[3:6]          # includes first and last index
v5[c(1,3,5)]    # display values by list of indices
v5[-2]
# vector indexing
v5 = c(27,4,20,36,43,11,29)
v5[-2]
v5[-c(4,6)]   # exclude values by list of indices
# data types
x = 5
class(x)  # numeric
y = c("1","2")
class(y)   # character
a = 1
b = 2
c = a > b
c
class(c)   # logical
st = c("Hello","world","this","is","python")
class(st)
summary(st)
nchar(st)
v = c("M","F","M","M","F","F","M")
fac = as.factor(v)   # factor variable - to categorize values
class(fac)
fac
class(fac)
summary(fac)
# built-in functions
x = c(14,53,46,35,65,23,78)
mean(x)
sum(x)
length(x)
sum(x)/length(x)
# user defined function
myMean = function(y){sum(y)/length(y)}
myMean(x)
# if else
gender = c("Male","Female","Male","Male","Female","Male","Female","Female")
ifelse(gender=="Male","Yes","No")
length(gender)
for (i in 1:length(gender)){
ifelse(gender[i]=="Male",print("Yes"),print("No"))
}
sq = seq(1:10)
sq
class(sq)
typeof(sq)
mult <- c(1,2.5,"3")
class(mult)
mult
c(1,2.5,3) -> sam
sam
class(sam)
setwd("D:/r_pgm")
Data = read.csv("dataset/customers-1000.csv")
dim(Data)
summary(Data)
head(Data)
head(Data,3)
str(Data)
class(str(Data))
cl = class(str(Data))
cl
x = 5
str(x)
colnames(Data)
str(Data)         # display internal structure of the data
colnames(Data)
# change column names
colnames(Data)[1] = "S.No"
colnames(Data)[2:4] = c("CustId","Fname","Lname")
colnames(Data)
# data cleaning
x = c(0,NA,2,3,4,-0.5,-0.2)
x
x > 2   # NA is displayed
is.na(NA)
!is.na(NA)
is.na(x)  # if NA is present, it returns true
x > 2 & !is.na(x)  # NA is excluded
(x == 0 | x == 2) & !is.na(x)  # exclude NA
is.nan(0/0)   # NAN - Not A Number
is.infinite(1/0)
is.infinite(0/0)
0/0
is.nan("f")
head(Data)
Data1 = Data   # copy of the data
Data1[100,5]
dim(Data1)
dim(Data[1])
dim(Data[][1])
Data[1][2]
Data[1,2]
dim(Data[,1])
dim(Data[1,])
# assigning some data to NA
Data1[100,5] = NA
Data1[300,2] = NA
Data1[400,3] = NA
Data1 = Data   # copy of the data
# assigning some data to NA
Data1[100,5]
Data1[100,5] = NA
Data1[300,2]
Data1[300,2] = NA
Data1[400,3]
Data1[400,3] = NA
sum(is.na(Data))   # 0
sum(is.na(Data1))  # 3
all(!is.na(Data1)) # checks if all data is not NA - FALSE (means NA is present)
all(is.na(Data1)) # checks if all data is not NA - FALSE (means NA is present)
# replacing NA with 0
Data1[is.na(Data1)]
Data1[is.na(Data1)] = 0
sum(is.na(Data1))  # No NA is present
# data cleaning in dataframe
df = data.frame(col1=c(NA,1,2), col2=c("One",NA,"Three"))
df
# display data without NA for each column
subset(df,!is.na(col1))  # size - 2x2
subset(df,!is.na(col2))  # size - 2x2
# remove NA from dataframe
subset(df,complete.cases(df))    # method - 1
na.omit(df)                     # method - 2
complete.cases(df)
df
df[1]
df[2]
complete.cases(df[1])
df[1]
subset(df,complete.cases(df[1]))
df
na.omit(df)
# using package "car"
library(car)
colnames(Freedman)
dim(Freedman)
head(Freedman)
summary(Freedman)
median(Freedman$density)   # Output - NA
median(Freedman$density, na.rm = T)   # ignore NA
mean(Freedman$density)   # Output - NA
mean(Freedman$density, na.rm = T)   # ignore NA
colnames(Freedman)
is.na(Freedman)
sum(is.na(Freedman))
# to remove NA from "Freedman" by creating a copy "Freedman.good"
Freedman.good = na.omit(Freedman)
sum(is.na(Freedman.good))
a_b = 4
a_b
!is.na(Freedman)
sum(!is.na(Freedman))
dim(Freedman)
sum(is.na(Freedman))
# Freedman_not_a_variable (comma should be included)
Freedman_notav = Freedman[!complete.cases(Freedman),]
Freedman_notav  # population and density column contains NA
# using library "UsingR"
library(UsingR)
# Database - babies, Column - dwt (dad's weight)
x = babies$dwt
summary(x)   # 999 - indicates outlier
x[x==999] = NA   # replacing 999 with NA
range(x)
summary(x)
range(x)
summary(x)   # 999 - indicates outlier
summary(x)
range(x,na.rm=T)
# Remove Non-unique values using "Data"
head(Data)
Data2 = Data
dim(Data)
iris[,3]   # 3rd column
head(iris[,3])
# Working with factor variables
library(UsingR)
head(Cars93)
d = Cars93[1:3, 1:4]  # sample dataframe rows (1 to 3) and cols (1 to 4)
d
str(d)
summary(d)
# assigning NA values
d[3,4] = NA
d[1,1] = NA
d
# assigning values for col-2 and col-4 in row-3
d[3, c(2,4)] = list("A3", 40)
d  # col-2 does not change
class(d$Model)
# to rectify, we add the new value in the levels (unique values)
levels(d$Model)  # levels in "d$Model"
unique(d$Model)
length(unique(d$Model))
ls <- list(unique(d$Model))
ls
length(ls)
ls[1]
ls[2]
ls[3]
ls[1]
length(ls[1])
ls[1,1]
# to rectify, we add the new value in the levels (unique values)
levels(d$Model)  # levels in "d$Model"
d$Model = droplevels(d$Model)  # drop unused levels of "d$Model"
d$Model
d$Model
# add levels
levels(d$Model)
levels(d$Model) = c(levels(d$Model),"A3","A4","A5")  # default + 3 levels
levels(d$Model) # 3 extra levels are added
# assign the values again
d[3,c(2,4)] = list("A3",40)
d  # it works without showing <NA>
# adding new row
d[4,] = list("Audi","A4","Midsize",35)  # method - 1
d
d = rbind(d,list("Audi","A4","Midsize",35))  # method - 2
d
# adding new column
d[,5] = d$Min.Price*1.5   # method - 1
d
colnames(d)[5] = "modprice"
d
d$modprice = d$Min.Price*1.3   # method - 2
d
d = within(d,{modprice=Min.Price*1.2})  # method - 3
d
# long and wide dataframes
Speed.1 = c(100:105)
Speed.2 = c(200:205)
Speed.3 = c(300:305)
Speed.4 = c(400:405)
Speed.5 = c(500:505)
id = c(1:6)
Run = c("A","B","C","D","E","F")
Speed = cbind.data.frame(id,Run,Speed.1,Speed.2,Speed.3,Speed.4,Speed.5)
Speed
library(reshape2)
long = melt(Speed, id.vars = names(Speed)[1:2], variable.name = "Speed")
head(long)
head(long,10)
wide = dcast(long, id+Run ~Speed)
wide
# Merging dataframes
v1 = c("Dark Knight","Interstellar","Inception","Tenet","Dunkirk")
v2 = c(716847123,12413214,678456435,568568345,254362345)
domestic = cbind.data.frame(v1,v2)
domestic
colnames(domestic) = c("Name","Domestic")
domestic
v3 = c("Dark Knight","Insomnia","Inception","Tenet","Memento")
v4 = c(716847123,12413214,678456435,568568345,254362345)
foreign = cbind.data.frame(v3,v4)
foreign
colnames(foreign) = c("name","foreign")
foreign
Final = merge(domestic, foreign, by.x = "Name", by.y = "name")
# if I want to use only "by" in "merge" function make the column names same
colnames(foreign) = c("Name","foreign")
foreign
Final = merge(domestic, foreign, by = "Name")
Final
